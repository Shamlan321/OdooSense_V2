networks:
  odoo_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

services:
  db:
    image: pgvector/pgvector:pg17
    container_name: odoo_postgres_db
    hostname: db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/sqls/init.sql:/docker-entrypoint-initdb.d/init.sql
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
    networks:
      odoo_network:
        aliases:
          - db
          - postgres
          - database
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  odoo-expert:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: odoo_expert_app
    hostname: odoo-expert
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"  # API port
      - "8501:8501"  # UI port
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - LLM_MODEL=${LLM_MODEL}
      - BEARER_TOKEN=${BEARER_TOKEN}
      - CORS_ORIGINS=${CORS_ORIGINS}
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
    networks:
      odoo_network:
        aliases:
          - odoo-expert
          - app
          - api
    volumes:
      - ./raw_data:/app/raw_data:rw
      - ./markdown:/app/markdown:rw
      - logs_volume:/app/logs:rw
      - ./.env:/app/.env:ro
    healthcheck:
      test: ["CMD", "python", "docker/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s  # Added start period

volumes:
  postgres_data:
  logs_volume:
